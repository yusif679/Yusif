#include <iostream>
#include <vector>
using namespace std;
//1. Define a global
vector<int> gv;
void f(vector<int> vv){
	vector<int> lv;
	vector<int> lv2;
	int fact=1;
//	3.b) Copy the values from gv into lv.
	cout<<"-----Question-3.c)-----"<<endl;
	for(int i=0;i<gv.size();i++){
		lv.push_back(gv[i]);
//		3.c) Print out the elements of lv.
		cout<<"Element of lv:"<<lv[i]<<endl;
	}
//	3.d) lv2; initialize it to be a copy of the argument vector.
	cout<<"-----Question-3.e)-----"<<endl;
	for(int i=0;i<lv.size();i++){
		lv2.push_back(lv[i]);
//		3.e) Print out the elements of lv2.
		cout<<"Element of lv2:"<<lv2[i]<<endl;
	}
	vector<int> factVect;
//	4.b)  the first ten factorial
 cout<<"-----Question-4.b)-----"<<endl;
	 for(int i=0;i<vv.size();i++){
           	fact*=vv[i];
           	factVect.push_back(fact);
           	cout<<"Factorial of vector element:"<<factVect[i]<<endl;
		   }
}

int main(){
	//	1.vector<int> gv; initialize 

	gv.push_back(1);
	gv.push_back(2);
	gv.push_back(4);
	gv.push_back(8);
	gv.push_back(16);
	gv.push_back(32);
	gv.push_back(64);
	gv.push_back(128);
	gv.push_back(256);
	gv.push_back(512);
// 3.a)lv with the same number of elements as the argument vector.	
	vector<int> lv;
	lv.push_back(1);
	lv.push_back(2);
	lv.push_back(4);
	lv.push_back(8);
	lv.push_back(16);
	lv.push_back(32);
	lv.push_back(64);
	lv.push_back(128);
	lv.push_back(256);
	lv.push_back(512);
	vector<int> vv;
 	for(int i=1;i<=10;i++){
 		vv.push_back(i);
	 }
	vector<int> factVect;
//	4.a) Call f() with gv as its argument.
	f(vv);
//	4.c) Call f() with vv as its argument.
	f(vv);
}
